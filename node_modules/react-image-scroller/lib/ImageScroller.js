"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.defaultStatus = void 0;

var _emotion = require("emotion");

var _react = _interopRequireWildcard(require("react"));

require("./array-includes-polyfill");

require("./array-from-polyfill");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FULLY_VISIBLE = 'FULLY_VISIBLE';
var PARTIALLY_VISIBLE = 'PARTIALLY_VISIBLE';
var NOT_VISIBLE = 'NOT_VISIBLE';
var defaultStatus = {
  previous: 0,
  current: [0],
  next: 0
};
exports.defaultStatus = defaultStatus;

function getStatus(items) {
  var previous = null;
  var current = [];
  var next = null;
  var prevItem;
  items.forEach(function (item) {
    // There may be any number of FULLY_VISIBLE items.
    if (item.visibility === FULLY_VISIBLE) {
      current.push(item.index);
    } // There can only be two simultaneous PARTIALLY_VISIBLE items.
    // If they are adjacent, there can be no FULLY_VISIBLE items.
    // So these two items are 'previous' and 'next'.
    else if (item.visibility === PARTIALLY_VISIBLE && prevItem && prevItem.visibility === PARTIALLY_VISIBLE) {
        previous = prevItem.index;
        next = item.index;
      } // Keep pushing 'previous' forward each iteration until one of
      // the above cases is true.
      else if (current.length === 0 && next === null) {
          previous = item.index;
        } // The item following the final FULLY_VISIBLE item is 'next'.
        else if (current.length > 0 && next === null) {
            next = item.index;
          } // Save this item to refer back to in the next iteration.


    prevItem = item;
  });
  return {
    previous: previous,
    current: current,
    next: next
  };
}

var _default = _react.default.forwardRef(Scroller);

exports.default = _default;

function Scroller(_ref, ref) {
  var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$hideScrollbar = _ref.hideScrollbar,
      hideScrollbar = _ref$hideScrollbar === void 0 ? true : _ref$hideScrollbar,
      _ref$innerClassName = _ref.innerClassName,
      innerClassName = _ref$innerClassName === void 0 ? '' : _ref$innerClassName,
      _ref$innerStyle = _ref.innerStyle,
      innerStyle = _ref$innerStyle === void 0 ? {} : _ref$innerStyle,
      items = _ref.items,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,
      _ref$renderWithin = _ref.renderWithin,
      renderWithin = _ref$renderWithin === void 0 ? null : _ref$renderWithin,
      _ref$scrollOnClick = _ref.scrollOnClick,
      scrollOnClick = _ref$scrollOnClick === void 0 ? true : _ref$scrollOnClick,
      _ref$scrollWithArrows = _ref.scrollWithArrows,
      scrollWithArrows = _ref$scrollWithArrows === void 0 ? true : _ref$scrollWithArrows,
      _ref$scrollContainerC = _ref.scrollContainerClassName,
      scrollContainerClassName = _ref$scrollContainerC === void 0 ? '' : _ref$scrollContainerC,
      _ref$scrollContainerS = _ref.scrollContainerStyle,
      scrollContainerStyle = _ref$scrollContainerS === void 0 ? {} : _ref$scrollContainerS,
      props = _objectWithoutProperties(_ref, ["children", "className", "hideScrollbar", "innerClassName", "innerStyle", "items", "onChange", "renderWithin", "scrollOnClick", "scrollWithArrows", "scrollContainerClassName", "scrollContainerStyle"]);

  // Either `items` or `children` may be used to set scroll items (`items` has priority)
  items = items || _react.default.Children.toArray(children);
  var mainRef = (0, _react.useRef)(null);
  var scrollContainerRef = (0, _react.useRef)(null);
  var itemsContainerRef = (0, _react.useRef)(null); // Track the indices of relevant items

  var _useState = (0, _react.useState)({
    previous: null,
    current: [],
    next: null
  }),
      _useState2 = _slicedToArray(_useState, 2),
      status = _useState2[0],
      setStatus = _useState2[1];

  (0, _react.useLayoutEffect)(function () {
    var main = mainRef.current;
    var sc = scrollContainerRef.current;
    sc.style.overflowX = 'scroll';
    /* Manually hide the horizontal scrollbar with a hidden overflow.
       `scrollbar-width: none` is not available across-the-board at time of implementation.
    */

    if (hideScrollbar) {
      main.style.overflowY = 'hidden';
      var scrollbarWidth = main.clientHeight - sc.clientHeight;
      sc.style.height = "calc(100% + ".concat(scrollbarWidth, "px)");
    } else {
      main.style.overflowY = '';
      sc.style.height = '100%';
    }
    /* Manually limit the height of the contents of each item wrapper. There is no
       reliable CSS solution due to some weird shenanigans with the intrinsic
       height of images, or something â€“ I'm not quite sure. I could not find a way
       to reliably limit the width of the item wrapper to its contents
       (aka shrinkwrap). Edge/IE semi-randomly set the wrapper width to the pixel
       width of the containing img instead of following the intrinsic ratio of its
       height, and Firefox/Chrome introduced a phantom padding-right when toggling
       the scrollbar (caused by extra width).
    */


    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {
      item.style.height = "".concat(sc.clientHeight, "px");
    });
    /* Make sure renderWithin doesn't overlap the scrollContainer's scrollbar.
       `renderWithin` is absolutely positioned, so the padding and scrollbar of the
       parent element are ignored.
    */


    _toConsumableArray(sc.children).forEach(function (element) {
      element.style.maxHeight = "".concat(sc.clientHeight, "px");
    });
  }, [hideScrollbar]);
  (0, _react.useEffect)(function () {
    // IntersectionObservers only report what's _changed_, so keep a list
    var intersectionRatios = new Map();
    var observer = new IntersectionObserver(observerCallback, {
      root: scrollContainerRef.current,
      threshold: [0, 0.98]
    });

    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {
      observer.observe(item);
    });

    function observerCallback(entries) {
      // Update the current intersectionRatio of each entry
      entries.forEach(function (entry) {
        intersectionRatios.set(parseInt(entry.target.getAttribute('data-item-id'), 10), entry.intersectionRatio);
      }); // Update the status

      var items = _toConsumableArray(itemsContainerRef.current.children);

      var visibilityList = items.map(function (item) {
        var itemIndex = item.getAttribute('data-item-id');
        itemIndex = parseInt(itemIndex, 10);
        var ratio = intersectionRatios.get(itemIndex);
        var visibility;

        if (ratio > 0.98) {
          visibility = FULLY_VISIBLE;
        } else if (ratio === 0) {
          visibility = NOT_VISIBLE;
        } else visibility = PARTIALLY_VISIBLE;

        return {
          index: itemIndex,
          visibility: visibility
        };
      });
      var newStatus = getStatus(visibilityList);
      setStatus(newStatus);
      onChange(newStatus);
    }
  }, []);
  (0, _react.useEffect)(function () {
    function handleKeyPress(event) {
      if (scrollWithArrows && mainRef.current.contains(event.target)) {
        if (event.key === 'ArrowRight') {
          event.preventDefault();
          next();
        } else if (event.key === 'ArrowLeft') {
          event.preventDefault();
          previous();
        }
      }
    }

    window.addEventListener('keydown', handleKeyPress);
    return function cleanUp() {
      window.removeEventListener('keydown', handleKeyPress);
    };
  }, [next, previous]);

  function next() {
    scrollTo(status.next, 'nearest');
  }

  function previous() {
    scrollTo(status.previous, 'nearest');
  }

  function scrollTo(itemIndex) {
    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'center';

    if (itemIndex === undefined || itemIndex === null || itemIndex < 0) {
      return;
    }

    itemIndex = Math.min(itemIndex, items.length - 1);
    var mainWidth = mainRef.current.offsetWidth;
    var element = itemsContainerRef.current.children[itemIndex];
    if (!element) return; // Option A: Center the item

    if (position === 'center') {
      var margin = (mainWidth - element.offsetWidth) / 2;
      scrollContainerRef.current.scrollTo({
        top: 0,
        left: element.offsetLeft - margin,
        // parent element must be positioned
        behavior: 'smooth'
      });
    } // Option B: Fit in as many itemss as possible
    else if (position === 'nearest') {
        var fit = function fit(initialWidth, step) {
          var width = 0;

          while (true) {
            var adjacentElement = itemsContainerRef.current.children[itemIndex + step];
            if (!adjacentElement) break;
            var adjacentWidth = adjacentElement.offsetWidth;

            if (initialWidth + width + adjacentWidth < mainWidth) {
              width += adjacentWidth;
            } else {
              break;
            }

            step += step;
          }

          return width;
        };

        // Determine the direction to look first
        var step;

        if (status.current.length > 0) {
          step = itemIndex > status.current[0] ? -1 : 1;
        } else {
          step = itemIndex > status.previous ? -1 : 1;
        } // Look back and ahead to see if any other items will fit too


        var backWidth = fit(element.offsetWidth, step);
        var aheadWidth = fit(element.offsetWidth + backWidth, -step);
        var width = element.offsetWidth + backWidth + aheadWidth;

        var _margin = (mainWidth - width) / 2;

        scrollContainerRef.current.scrollTo({
          top: 0,
          left: element.offsetLeft - (step === 1 ? aheadWidth : backWidth) - _margin,
          behavior: 'smooth'
        });

        if (element.offsetLeft === 0) {
          mainRef.current.focus();
        }
      }
  }

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      next: next,
      previous: previous,
      scrollTo: scrollTo
    };
  }, [next, previous, scrollTo]);
  return _react.default.createElement("div", _extends({
    ref: mainRef,
    tabIndex: 0
  }, props, {
    className: className + ' ' +
    /*#__PURE__*/
    (0, _emotion.css)(process.env.NODE_ENV === "production" ? {
      name: "1phgt8k-ImageScroller--Scroller",
      styles: "height:28em;label:ImageScroller--Scroller;"
    } : {
      name: "1phgt8k-ImageScroller--Scroller",
      styles: "height:28em;label:ImageScroller--Scroller;",
      map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbWFnZVNjcm9sbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStSbUIiLCJmaWxlIjoiLi4vc3JjL0ltYWdlU2Nyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcclxuICAgIHVzZVJlZixcclxuICAgIHVzZVN0YXRlLFxyXG4gICAgdXNlRWZmZWN0LFxyXG4gICAgdXNlTGF5b3V0RWZmZWN0LFxyXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZSxcclxufSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnLi9hcnJheS1pbmNsdWRlcy1wb2x5ZmlsbCc7XHJcbmltcG9ydCAnLi9hcnJheS1mcm9tLXBvbHlmaWxsJztcclxuaW1wb3J0IHtjc3N9IGZyb20gJ2Vtb3Rpb24nO1xyXG5cclxuY29uc3QgRlVMTFlfVklTSUJMRSA9ICdGVUxMWV9WSVNJQkxFJztcclxuY29uc3QgUEFSVElBTExZX1ZJU0lCTEUgPSAnUEFSVElBTExZX1ZJU0lCTEUnO1xyXG5jb25zdCBOT1RfVklTSUJMRSA9ICdOT1RfVklTSUJMRSc7XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdFN0YXR1cyA9IHtcclxuICAgIHByZXZpb3VzOiAwLFxyXG4gICAgY3VycmVudDogWzBdLFxyXG4gICAgbmV4dDogMCxcclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldFN0YXR1cyhpdGVtcykge1xyXG4gICAgbGV0IHByZXZpb3VzID0gbnVsbDtcclxuICAgIGNvbnN0IGN1cnJlbnQgPSBbXTtcclxuICAgIGxldCBuZXh0ID0gbnVsbDtcclxuXHJcbiAgICBsZXQgcHJldkl0ZW07XHJcbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIC8vIFRoZXJlIG1heSBiZSBhbnkgbnVtYmVyIG9mIEZVTExZX1ZJU0lCTEUgaXRlbXMuXHJcbiAgICAgICAgaWYgKGl0ZW0udmlzaWJpbGl0eSA9PT0gRlVMTFlfVklTSUJMRSkge1xyXG4gICAgICAgICAgICBjdXJyZW50LnB1c2goaXRlbS5pbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGVyZSBjYW4gb25seSBiZSB0d28gc2ltdWx0YW5lb3VzIFBBUlRJQUxMWV9WSVNJQkxFIGl0ZW1zLlxyXG4gICAgICAgIC8vIElmIHRoZXkgYXJlIGFkamFjZW50LCB0aGVyZSBjYW4gYmUgbm8gRlVMTFlfVklTSUJMRSBpdGVtcy5cclxuICAgICAgICAvLyBTbyB0aGVzZSB0d28gaXRlbXMgYXJlICdwcmV2aW91cycgYW5kICduZXh0Jy5cclxuICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgaXRlbS52aXNpYmlsaXR5ID09PSBQQVJUSUFMTFlfVklTSUJMRSAmJlxyXG4gICAgICAgICAgICBwcmV2SXRlbSAmJlxyXG4gICAgICAgICAgICBwcmV2SXRlbS52aXNpYmlsaXR5ID09PSBQQVJUSUFMTFlfVklTSUJMRVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwcmV2aW91cyA9IHByZXZJdGVtLmluZGV4O1xyXG4gICAgICAgICAgICBuZXh0ID0gaXRlbS5pbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEtlZXAgcHVzaGluZyAncHJldmlvdXMnIGZvcndhcmQgZWFjaCBpdGVyYXRpb24gdW50aWwgb25lIG9mXHJcbiAgICAgICAgLy8gdGhlIGFib3ZlIGNhc2VzIGlzIHRydWUuXHJcbiAgICAgICAgZWxzZSBpZiAoY3VycmVudC5sZW5ndGggPT09IDAgJiYgbmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwcmV2aW91cyA9IGl0ZW0uaW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGUgaXRlbSBmb2xsb3dpbmcgdGhlIGZpbmFsIEZVTExZX1ZJU0lCTEUgaXRlbSBpcyAnbmV4dCcuXHJcbiAgICAgICAgZWxzZSBpZiAoY3VycmVudC5sZW5ndGggPiAwICYmIG5leHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgbmV4dCA9IGl0ZW0uaW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTYXZlIHRoaXMgaXRlbSB0byByZWZlciBiYWNrIHRvIGluIHRoZSBuZXh0IGl0ZXJhdGlvbi5cclxuICAgICAgICBwcmV2SXRlbSA9IGl0ZW07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge3ByZXZpb3VzLCBjdXJyZW50LCBuZXh0fTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuZm9yd2FyZFJlZihTY3JvbGxlcik7XHJcbmZ1bmN0aW9uIFNjcm9sbGVyKFxyXG4gICAge1xyXG4gICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgIGNsYXNzTmFtZSA9ICcnLFxyXG4gICAgICAgIGhpZGVTY3JvbGxiYXIgPSB0cnVlLFxyXG4gICAgICAgIGlubmVyQ2xhc3NOYW1lID0gJycsXHJcbiAgICAgICAgaW5uZXJTdHlsZSA9IHt9LFxyXG4gICAgICAgIGl0ZW1zLFxyXG4gICAgICAgIG9uQ2hhbmdlID0gKCkgPT4ge30sXHJcbiAgICAgICAgcmVuZGVyV2l0aGluID0gbnVsbCxcclxuICAgICAgICBzY3JvbGxPbkNsaWNrID0gdHJ1ZSxcclxuICAgICAgICBzY3JvbGxXaXRoQXJyb3dzID0gdHJ1ZSxcclxuICAgICAgICBzY3JvbGxDb250YWluZXJDbGFzc05hbWUgPSAnJyxcclxuICAgICAgICBzY3JvbGxDb250YWluZXJTdHlsZSA9IHt9LFxyXG4gICAgICAgIC4uLnByb3BzXHJcbiAgICB9LFxyXG4gICAgcmVmXHJcbikge1xyXG4gICAgLy8gRWl0aGVyIGBpdGVtc2Agb3IgYGNoaWxkcmVuYCBtYXkgYmUgdXNlZCB0byBzZXQgc2Nyb2xsIGl0ZW1zIChgaXRlbXNgIGhhcyBwcmlvcml0eSlcclxuICAgIGl0ZW1zID0gaXRlbXMgfHwgUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbik7XHJcblxyXG4gICAgY29uc3QgbWFpblJlZiA9IHVzZVJlZihudWxsKTtcclxuICAgIGNvbnN0IHNjcm9sbENvbnRhaW5lclJlZiA9IHVzZVJlZihudWxsKTtcclxuICAgIGNvbnN0IGl0ZW1zQ29udGFpbmVyUmVmID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICAgIC8vIFRyYWNrIHRoZSBpbmRpY2VzIG9mIHJlbGV2YW50IGl0ZW1zXHJcbiAgICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGUoe1xyXG4gICAgICAgIHByZXZpb3VzOiBudWxsLFxyXG4gICAgICAgIGN1cnJlbnQ6IFtdLFxyXG4gICAgICAgIG5leHQ6IG51bGwsXHJcbiAgICB9KTtcclxuXHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1haW4gPSBtYWluUmVmLmN1cnJlbnQ7XHJcbiAgICAgICAgY29uc3Qgc2MgPSBzY3JvbGxDb250YWluZXJSZWYuY3VycmVudDtcclxuICAgICAgICBzYy5zdHlsZS5vdmVyZmxvd1ggPSAnc2Nyb2xsJztcclxuXHJcbiAgICAgICAgLyogTWFudWFsbHkgaGlkZSB0aGUgaG9yaXpvbnRhbCBzY3JvbGxiYXIgd2l0aCBhIGhpZGRlbiBvdmVyZmxvdy5cclxuICAgICAgICAgICBgc2Nyb2xsYmFyLXdpZHRoOiBub25lYCBpcyBub3QgYXZhaWxhYmxlIGFjcm9zcy10aGUtYm9hcmQgYXQgdGltZSBvZiBpbXBsZW1lbnRhdGlvbi5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGlmIChoaWRlU2Nyb2xsYmFyKSB7XHJcbiAgICAgICAgICAgIG1haW4uc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gbWFpbi5jbGllbnRIZWlnaHQgLSBzYy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgIHNjLnN0eWxlLmhlaWdodCA9IGBjYWxjKDEwMCUgKyAke3Njcm9sbGJhcldpZHRofXB4KWA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWFpbi5zdHlsZS5vdmVyZmxvd1kgPSAnJztcclxuICAgICAgICAgICAgc2Muc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogTWFudWFsbHkgbGltaXQgdGhlIGhlaWdodCBvZiB0aGUgY29udGVudHMgb2YgZWFjaCBpdGVtIHdyYXBwZXIuIFRoZXJlIGlzIG5vXHJcbiAgICAgICAgICAgcmVsaWFibGUgQ1NTIHNvbHV0aW9uIGR1ZSB0byBzb21lIHdlaXJkIHNoZW5hbmlnYW5zIHdpdGggdGhlIGludHJpbnNpY1xyXG4gICAgICAgICAgIGhlaWdodCBvZiBpbWFnZXMsIG9yIHNvbWV0aGluZyDigJMgSSdtIG5vdCBxdWl0ZSBzdXJlLiBJIGNvdWxkIG5vdCBmaW5kIGEgd2F5XHJcbiAgICAgICAgICAgdG8gcmVsaWFibHkgbGltaXQgdGhlIHdpZHRoIG9mIHRoZSBpdGVtIHdyYXBwZXIgdG8gaXRzIGNvbnRlbnRzXHJcbiAgICAgICAgICAgKGFrYSBzaHJpbmt3cmFwKS4gRWRnZS9JRSBzZW1pLXJhbmRvbWx5IHNldCB0aGUgd3JhcHBlciB3aWR0aCB0byB0aGUgcGl4ZWxcclxuICAgICAgICAgICB3aWR0aCBvZiB0aGUgY29udGFpbmluZyBpbWcgaW5zdGVhZCBvZiBmb2xsb3dpbmcgdGhlIGludHJpbnNpYyByYXRpbyBvZiBpdHNcclxuICAgICAgICAgICBoZWlnaHQsIGFuZCBGaXJlZm94L0Nocm9tZSBpbnRyb2R1Y2VkIGEgcGhhbnRvbSBwYWRkaW5nLXJpZ2h0IHdoZW4gdG9nZ2xpbmdcclxuICAgICAgICAgICB0aGUgc2Nyb2xsYmFyIChjYXVzZWQgYnkgZXh0cmEgd2lkdGgpLlxyXG4gICAgICAgICovXHJcbiAgICAgICAgWy4uLml0ZW1zQ29udGFpbmVyUmVmLmN1cnJlbnQuY2hpbGRyZW5dLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGl0ZW0uc3R5bGUuaGVpZ2h0ID0gYCR7c2MuY2xpZW50SGVpZ2h0fXB4YDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogTWFrZSBzdXJlIHJlbmRlcldpdGhpbiBkb2Vzbid0IG92ZXJsYXAgdGhlIHNjcm9sbENvbnRhaW5lcidzIHNjcm9sbGJhci5cclxuICAgICAgICAgICBgcmVuZGVyV2l0aGluYCBpcyBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQsIHNvIHRoZSBwYWRkaW5nIGFuZCBzY3JvbGxiYXIgb2YgdGhlXHJcbiAgICAgICAgICAgcGFyZW50IGVsZW1lbnQgYXJlIGlnbm9yZWQuXHJcbiAgICAgICAgKi9cclxuICAgICAgICBbLi4uc2MuY2hpbGRyZW5dLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gYCR7c2MuY2xpZW50SGVpZ2h0fXB4YDtcclxuICAgICAgICB9KTtcclxuICAgIH0sIFtoaWRlU2Nyb2xsYmFyXSk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAvLyBJbnRlcnNlY3Rpb25PYnNlcnZlcnMgb25seSByZXBvcnQgd2hhdCdzIF9jaGFuZ2VkXywgc28ga2VlcCBhIGxpc3RcclxuICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb25SYXRpb3MgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIob2JzZXJ2ZXJDYWxsYmFjaywge1xyXG4gICAgICAgICAgICByb290OiBzY3JvbGxDb250YWluZXJSZWYuY3VycmVudCxcclxuICAgICAgICAgICAgdGhyZXNob2xkOiBbMCwgMC45OF0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWy4uLml0ZW1zQ29udGFpbmVyUmVmLmN1cnJlbnQuY2hpbGRyZW5dLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoaXRlbSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVyQ2FsbGJhY2soZW50cmllcykge1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGN1cnJlbnQgaW50ZXJzZWN0aW9uUmF0aW8gb2YgZWFjaCBlbnRyeVxyXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUmF0aW9zLnNldChcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChlbnRyeS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWl0ZW0taWQnKSwgMTApLFxyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmludGVyc2VjdGlvblJhdGlvXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgc3RhdHVzXHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gWy4uLml0ZW1zQ29udGFpbmVyUmVmLmN1cnJlbnQuY2hpbGRyZW5dO1xyXG4gICAgICAgICAgICBjb25zdCB2aXNpYmlsaXR5TGlzdCA9IGl0ZW1zLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtSW5kZXggPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1pdGVtLWlkJyk7XHJcbiAgICAgICAgICAgICAgICBpdGVtSW5kZXggPSBwYXJzZUludChpdGVtSW5kZXgsIDEwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gaW50ZXJzZWN0aW9uUmF0aW9zLmdldChpdGVtSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZpc2liaWxpdHk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmF0aW8gPiAwLjk4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eSA9IEZVTExZX1ZJU0lCTEU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJhdGlvID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eSA9IE5PVF9WSVNJQkxFO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHZpc2liaWxpdHkgPSBQQVJUSUFMTFlfVklTSUJMRTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGl0ZW1JbmRleCxcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXR1cyA9IGdldFN0YXR1cyh2aXNpYmlsaXR5TGlzdCk7XHJcbiAgICAgICAgICAgIHNldFN0YXR1cyhuZXdTdGF0dXMpO1xyXG4gICAgICAgICAgICBvbkNoYW5nZShuZXdTdGF0dXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUtleVByZXNzKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChzY3JvbGxXaXRoQXJyb3dzICYmIG1haW5SZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dSaWdodCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dMZWZ0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleVByZXNzKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY2xlYW5VcCgpIHtcclxuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlQcmVzcyk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtuZXh0LCBwcmV2aW91c10pO1xyXG5cclxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICAgICAgc2Nyb2xsVG8oc3RhdHVzLm5leHQsICduZWFyZXN0Jyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBwcmV2aW91cygpIHtcclxuICAgICAgICBzY3JvbGxUbyhzdGF0dXMucHJldmlvdXMsICduZWFyZXN0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2Nyb2xsVG8oaXRlbUluZGV4LCBwb3NpdGlvbiA9ICdjZW50ZXInKSB7XHJcbiAgICAgICAgaWYgKGl0ZW1JbmRleCA9PT0gdW5kZWZpbmVkIHx8IGl0ZW1JbmRleCA9PT0gbnVsbCB8fCBpdGVtSW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGl0ZW1JbmRleCA9IE1hdGgubWluKGl0ZW1JbmRleCwgaXRlbXMubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1haW5XaWR0aCA9IG1haW5SZWYuY3VycmVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gaXRlbXNDb250YWluZXJSZWYuY3VycmVudC5jaGlsZHJlbltpdGVtSW5kZXhdO1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBPcHRpb24gQTogQ2VudGVyIHRoZSBpdGVtXHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW4gPSAobWFpbldpZHRoIC0gZWxlbWVudC5vZmZzZXRXaWR0aCkgLyAyO1xyXG4gICAgICAgICAgICBzY3JvbGxDb250YWluZXJSZWYuY3VycmVudC5zY3JvbGxUbyh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBlbGVtZW50Lm9mZnNldExlZnQgLSBtYXJnaW4sIC8vIHBhcmVudCBlbGVtZW50IG11c3QgYmUgcG9zaXRpb25lZFxyXG4gICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9wdGlvbiBCOiBGaXQgaW4gYXMgbWFueSBpdGVtc3MgYXMgcG9zc2libGVcclxuICAgICAgICBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ25lYXJlc3QnKSB7XHJcbiAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgZGlyZWN0aW9uIHRvIGxvb2sgZmlyc3RcclxuICAgICAgICAgICAgbGV0IHN0ZXA7XHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMuY3VycmVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwID0gaXRlbUluZGV4ID4gc3RhdHVzLmN1cnJlbnRbMF0gPyAtMSA6IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwID0gaXRlbUluZGV4ID4gc3RhdHVzLnByZXZpb3VzID8gLTEgOiAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBMb29rIGJhY2sgYW5kIGFoZWFkIHRvIHNlZSBpZiBhbnkgb3RoZXIgaXRlbXMgd2lsbCBmaXQgdG9vXHJcbiAgICAgICAgICAgIGNvbnN0IGJhY2tXaWR0aCA9IGZpdChlbGVtZW50Lm9mZnNldFdpZHRoLCBzdGVwKTtcclxuICAgICAgICAgICAgY29uc3QgYWhlYWRXaWR0aCA9IGZpdChlbGVtZW50Lm9mZnNldFdpZHRoICsgYmFja1dpZHRoLCAtc3RlcCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggKyBiYWNrV2lkdGggKyBhaGVhZFdpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBtYXJnaW4gPSAobWFpbldpZHRoIC0gd2lkdGgpIC8gMjtcclxuXHJcbiAgICAgICAgICAgIHNjcm9sbENvbnRhaW5lclJlZi5jdXJyZW50LnNjcm9sbFRvKHtcclxuICAgICAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vZmZzZXRMZWZ0IC1cclxuICAgICAgICAgICAgICAgICAgICAoc3RlcCA9PT0gMSA/IGFoZWFkV2lkdGggOiBiYWNrV2lkdGgpIC1cclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4sXHJcbiAgICAgICAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5vZmZzZXRMZWZ0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBtYWluUmVmLmN1cnJlbnQuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZml0KGluaXRpYWxXaWR0aCwgc3RlcCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRqYWNlbnRFbGVtZW50ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNDb250YWluZXJSZWYuY3VycmVudC5jaGlsZHJlbltpdGVtSW5kZXggKyBzdGVwXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFkamFjZW50RWxlbWVudCkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkamFjZW50V2lkdGggPSBhZGphY2VudEVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxXaWR0aCArIHdpZHRoICsgYWRqYWNlbnRXaWR0aCA8IG1haW5XaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCArPSBhZGphY2VudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdGVwICs9IHN0ZXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+ICh7bmV4dCwgcHJldmlvdXMsIHNjcm9sbFRvfSksIFtcclxuICAgICAgICBuZXh0LFxyXG4gICAgICAgIHByZXZpb3VzLFxyXG4gICAgICAgIHNjcm9sbFRvLFxyXG4gICAgXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIHJlZj17bWFpblJlZn1cclxuICAgICAgICAgICAgdGFiSW5kZXg9ezB9XHJcbiAgICAgICAgICAgIHsuLi5wcm9wc31cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSArXHJcbiAgICAgICAgICAgICAgICAnICcgK1xyXG4gICAgICAgICAgICAgICAgY3NzYFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjhlbTtcclxuICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgcmVmPXtzY3JvbGxDb250YWluZXJSZWZ9XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17c2Nyb2xsQ29udGFpbmVyU3R5bGV9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3Njcm9sbENvbnRhaW5lckNsYXNzTmFtZX1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dYOiAnc2Nyb2xsJyxcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHtyZW5kZXJXaXRoaW4gJiYgKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3NgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDIwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGB9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVuZGVyV2l0aGluKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgcmVmPXtpdGVtc0NvbnRhaW5lclJlZn1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2lubmVyQ2xhc3NOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLCAvLyBmb3IgbWVhc3VyaW5nIG9mZnNldCBvZiBjaGlsZCBpdGVtc1xyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSwgaXRlbUluZGV4KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jbG9uZUVsZW1lbnQoaXRlbSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEtaXRlbS1pZCc6IGl0ZW1JbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogaXRlbUluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxPbkNsaWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMuY3VycmVudC5pbmNsdWRlcyhpdGVtSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUbyhpdGVtSW5kZXgsICdjZW50cmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvKGl0ZW1JbmRleCwgJ25lYXJlc3QnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMCAwIGF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGF1dG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LWZpdDogY29udGFpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBoZWlnaHQ6IDEwMCU7ICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB3aWR0aDogYXV0bzsgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvbnRhaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpdGVtLnByb3BzLmNsYXNzTmFtZSB8fCAnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgey8qIHtpdGVtcy5tYXAoKGl0ZW0sIGl0ZW1JbmRleCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWl0ZW0taWQ9e2l0ZW1JbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogJzAgMCBhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2xheTogJ2lubGluZS1ibG9jaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aXRlbUluZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5jdXJyZW50LmluY2x1ZGVzKGl0ZW1JbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG8oaXRlbUluZGV4LCAnY2VudHJlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG8oaXRlbUluZGV4LCAnbmVhcmVzdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtSZWFjdC5jbG9uZUVsZW1lbnQoaXRlbSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdEZpdDogJ2NvbnRhaW4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oaXRlbS5wcm9wcy5zdHlsZSB8fCB7fSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKSl9ICovfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufVxyXG4iXX0= */"
    })
  }), _react.default.createElement("div", _defineProperty({
    ref: scrollContainerRef,
    style: scrollContainerStyle,
    className: scrollContainerClassName
  }, "style", {
    height: '100%',
    overflowX: 'scroll'
  }), renderWithin && _react.default.createElement("div", {
    className:
    /*#__PURE__*/
    (0, _emotion.css)(process.env.NODE_ENV === "production" ? {
      name: "s73t0w-ImageScroller--Scroller",
      styles: "position:absolute;height:100%;left:0;right:0;pointer-events:none;z-index:20;*{pointer-events:auto;}label:ImageScroller--Scroller;"
    } : {
      name: "s73t0w-ImageScroller--Scroller",
      styles: "position:absolute;height:100%;left:0;right:0;pointer-events:none;z-index:20;*{pointer-events:auto;}label:ImageScroller--Scroller;",
      map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
    })
  }, renderWithin({
    scrollTo: scrollTo,
    next: next,
    previous: previous,
    items: items,
    status: status
  })), _react.default.createElement("div", {
    ref: itemsContainerRef,
    className: innerClassName,
    style: {
      display: 'flex',
      height: '100%',
      position: 'relative' // for measuring offset of child items

    }
  }, items.map(function (item, itemIndex) {
    return _react.default.cloneElement(item, {
      'data-item-id': itemIndex,
      key: itemIndex,
      onClick: function onClick(event) {
        if (scrollOnClick) {
          event.preventDefault();

          if (status.current.includes(itemIndex)) {
            scrollTo(itemIndex, 'centre');
          } else {
            scrollTo(itemIndex, 'nearest');
          }
        }
      },
      className:
      /*#__PURE__*/
      (0, _emotion.css)(process.env.NODE_ENV === "production" ? {
        name: "qca9rv",
        styles: "flex:0 0 auto;height:100%;width:auto;max-width:100%;object-fit:contain;overflow-y:auto;display:block;user-select:none;*{max-width:100%;object-fit:contain;}"
      } : {
        name: "qca9rv",
        styles: "flex:0 0 auto;height:100%;width:auto;max-width:100%;object-fit:contain;overflow-y:auto;display:block;user-select:none;*{max-width:100%;object-fit:contain;}",
        map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
      }) + ' ' + (item.props.className || '')
    });
  }))));
}